Blöcke vs. ganze Dateien auf SSD cachen:
Es werden immer ganze Dateien gebraucht -> warum kann es Sinn machen nur einzelne Blöcke zu cachen?
Datenbankanwendung: Indexsuche machen Blöcke schon Sinn

//Häufig verwendeten Dateien entspricht häufig verwendeten Blöcken, Vermutung: kein Unterschied

Bei kleinem Cache vielleicht besser Blöcke zu cachen, wir haben großen Cache



Was möchte man überhaupt cachen?
Nur Dateiweise? Bei vielen kleinen Dateien wirkungslos
Einen ganzen Ordner (Prefetching ...)? -> gefährlich, Ordner vielleicht riesen groß

Häufig verwendete Dateien lernen?
-Zyklische Liste mit referenced Bit
Idee:
Immer die 5% am häufigsten verwendeten Dateien/Blöcke cachen (setzt lange Lernphase voraus) + Rest von großen Dateien, die nicht mit Fullspeed konsumiert werden, z.B Streaming (Prefetching, nur für Blöcke interresant)

Beim Schreiben:
Selbe zyklische Liste wie oben

Ist die Datei immer im Cache? Oder gibts Situationen in denen direkt auf Platte geschrieben wird? -> wohl nicht, zu, umfangreich
Schreibzugriffe solange verzögern bis gelesen wird

immer 4GB Platz frei, damit neue Dateien immer klomplett geschrieben werden können
Was passiert wenn zu schreibende Datei größer als SSD? -> Problem gibts bei uns nicht SSD > 4GB

Spätestens beim umount müssen alle geänderten Dateien auf HDD geschrieben werden

Ändern sich die Blocknummern im laufenden Betrieb? (z.B. bei Erweiterung/Umordnung eines Eintrags), spätestens wohl bei filesystem-check

Was passiert beim Verschieben?
Was passiert beim löschen?




Auf der SSD speichern:
Zu jedem Block/Datei eine Dateneinheit mit info: zuWelcherDatei, Blocknummer, wieHäufigVerwendet, DatenSelber (optional, wenn gecached)


Fehlersicherheit:
Idee: Auf Festplatte und SSD einen Zeitstempel speichern, falls dieser Unterschiedlich ist, wird SSD geleert
